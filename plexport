#!/usr/bin/python
# Exports the Video IDs and Titles from a playlist to a text file
# Doesnt work for Privated Playlists
#
# SYNTAX -- 'plexport [Playlist_URL]' or 'plexport [Playlist_ID]'
# Eg. -- "plexport https://www.youtube.com/playlist?list=PLtcJBMFw-xBStidirECURLKs9-AtPE57D" (without quotes) will export the playlist
# Eg. -- "plexport PLtcJBMFw-xBStidirECURLKs9-AtPE57D" (without quotes) will also work with only the playlist id
# Also has a few special playlists saved with acronyms for convenience

import sys
import os
import argparse
import difflib
from googleapiclient.discovery import build

API_KEY = 'AIzaSyAJ0FuPhTk7JptUUsNMmRYgwnu8UbARaDE'
EXPORT_PATH = '/mnt/Other-Stuff/Playlist Backup/'
youtube = build('youtube', 'v3', developerKey=API_KEY)

# Frequently used playlists saved for ease of use
SAVED_PLAYLISTS = {
    '♪ Banger Beats ♫': 'PLEO1OsPKpmZFlWmAlfg9tPDVc2TsMIxfC',
    'Soothing Songs': 'PLEO1OsPKpmZGn4UKR6qvIChidbCpZZwm_',
    'Techno Tempo': 'PLEO1OsPKpmZEDc4PLpzl9g5bsn49LqnFw'
}


# Stores playlist video titles and their IDs
class Playlist:
    def __init__(self, vid_titles_list, ids_list):
        self.vids = vid_titles_list
        self.ids = ids_list
    
    def to_list(self):
        videos = []
        for vid, vid_id in zip(self.vids, self.ids):
            videos.append(f'{vid.strip()}  ---  {vid_id.strip()}\n')
        return videos


# Error in finding playlist. Usually caused by entering an invalid playlist
class PlaylistNotFoundError(Exception):
    pass


# Videos removed from playlist
class PlaylistVideosRemovedError(Exception):
    pass


# Checks if the requested playlist exists and can be accessed
def check_response(response):
    results = response['pageInfo']['totalResults']
    if results < 1:
        raise PlaylistNotFoundError


# Gets playlist title
def get_playlist_title(playlist_id):
    # Gets the contentDetails part of the info for the given playlist ID
    pl_response = youtube.playlists().list(
        part='snippet',
        id=playlist_id
    ).execute()
    check_response(pl_response)

    return pl_response['items'][0]['snippet']['title']


# Gets the playlist contents (Video titles and IDs)
def get_playlist_data(playlist_id):
    vid_ids_all = []
    vid_titles_all = []
    next_page_token = None
    while True:
        # Gets the contentDetails part of the info for the given playlist ID
        # Used to get the video IDs of all videos in the playlist
        pl_response = youtube.playlistItems().list(
            part='contentDetails',
            playlistId=playlist_id,
            maxResults=50,
            pageToken=next_page_token
        ).execute()
        check_response(pl_response)

        vid_ids = []
        # Iterates through the results and appends the video ids to the vid_id list
        for item in pl_response['items']:
            vid_ids.append(item['contentDetails']['videoId'])
        vid_ids_all += vid_ids

        # Gets the snippet part of the info for given video IDs which is
        # taken by joining the vid_ids list into a comma separated string
        vid_response = youtube.videos().list(
            part='snippet',
            id=','.join(vid_ids)
        ).execute()
        check_response(vid_response)

        vid_titles = []
        # Iterates through the results and appends the video titles to the vid_titles list
        for item in vid_response['items']:
            vid_titles.append(item['snippet']['title'])
        vid_titles_all += vid_titles

        # Gets the nextPageToken from the response obtained with the playlist ID
        # Breaks out of the loop if the nextPageToken is None (Last page of results reached)
        next_page_token = pl_response.get('nextPageToken')
        if next_page_token is None:
            break

    return Playlist(vid_titles_all, vid_ids_all)


def diff_files(old_file_contents, new_file_contents):
    diff = difflib.unified_diff(old_file_contents, new_file_contents, n=0, lineterm="")
    
    deletions = set()
    additions = set()
    for line in diff:
        if line.startswith("-") and not line.startswith("---"):
            deletions.add(line[1:].strip())

        elif line.startswith("+") and not line.startswith("+++"):
            additions.add(line[1:].strip())

    return deletions.difference(additions)
                

def write_to_file(title, playlist, export_path):
    with open(f'{export_path}/{title}.txt', 'w') as file:
        length = len(playlist.vids)
        for i in range(length):
            title = playlist.vids[i].strip()
            pl_id = playlist.ids[i].strip()
            file.write(f'{title}  ---  {pl_id}\n')


def export_playlist(playlist_id, title=None, export_path=EXPORT_PATH, check_diff=True):
    # If an invalid playlist is entered then a PlaylistNotFoundError
    # is raised which displays an error message for that playlist
    try:
        # Gets the title if not provided
        if title is None:
            title = get_playlist_title(playlist_id)
        print(f" - Exporting {title}")
        
        data = get_playlist_data(playlist_id)
        filepath = f'{export_path}/{title}.txt'

        # Diffs the new and old files to check if any videos have been removed
        if check_diff and os.path.exists(filepath):
            with open(filepath, 'r') as file:
                old_file_contents = file.readlines()
            new_file_contents = data.to_list()

            diff = diff_files(old_file_contents, new_file_contents)
            if diff:
                raise PlaylistVideosRemovedError

        write_to_file(title, data, export_path)

        # print('Done!')      # Testing Code
    except PlaylistNotFoundError:
        print(f'Error! Invalid Playlist ID: {playlist_id}\nPlaylist must not be Private')

    except PlaylistVideosRemovedError:
        print('   Warning! Videos Removed Since Last Export:')
        for vid in diff:
            print(f"    - {vid}")
        print()



# Argparse Options
def cli_parser():
    parser = argparse.ArgumentParser(
        description='Export the video titles and IDs from a playlist into a text file')

    # Gets Command Line Arguments
    parser.add_argument('playlist_name', type=str, nargs='?',
                        help='name of playlist')

    parser.add_argument('-u', '--url', type=str, action='append', help='playlist URL')

    parser.add_argument('-i', '--id', type=str, action='append', help='playlist ID')

    parser.add_argument('-a', '--all', action='store_true',
                        help='export all playlists')

    parser.add_argument('-p', '--path', type=str,
                        default=EXPORT_PATH,
                        help='path to save exported playlist')

    parser.add_argument('-f', '--force', action='store_true',
                        help='force export playlist even when removed videos are present')
    
    return parser


def main():
    parser = cli_parser()
    args = parser.parse_args()

    if not os.path.isdir(args.path):
        print(f"No such directory '{args.path}'\nDefaulting to '{EXPORT_PATH}'\n")
        args.path = EXPORT_PATH

    if len(sys.argv) < 2:
        print("No Arguments Found\n")
        parser.print_help(sys.stdout)
        return 1
    
    print("Searching for Playlist(s)")

    if args.playlist_name is not None: 
        if args.playlist_name == 'bb':
            saved_playlist = '♪ Banger Beats ♫'
        elif args.playlist_name == 'ss':
            saved_playlist = 'Soothing Songs'
        elif args.playlist_name == 'tt':
            saved_playlist = 'Techno Tempo'
        else:
            print('Error! Invalid Playlist Entered.')
            return 1
        export_playlist(SAVED_PLAYLISTS[saved_playlist], saved_playlist, 
                        export_path=args.path, check_diff=(not args.force))
    
    # Goes through all the saved frequently used playlists and exports them
    if args.all:
        for pl_title, pl_id in SAVED_PLAYLISTS.items():
            export_playlist(pl_id, pl_title, args.path, 
                            check_diff=(not args.force))
    
    # Removes part of the url to get only the video ID
    if args.url:
        for url in args.url:
            playlist = url[38:]
            export_playlist(playlist, export_path=args.path, 
                            check_diff=(not args.force))

    if args.id:
        for playlist in args.id:
            export_playlist(playlist, export_path=args.path, 
                            check_diff=(not args.force))


if __name__ == "__main__":
    main()

